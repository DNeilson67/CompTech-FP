statements	: NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement 	: KEYWORD:HASILNYA expr?
			: KEYWORD:LANJUT
			: KEYWORD:UDAHAN
			: expr

expr    	: KEYWORD:VARIABEL IDENTIFIER EQ expr
			: comp-expr ((KEYWORD:DAN|KEYWORD:ATAU) comp-expr)*

comp-expr 	: NOT comp-expr
			: arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr	: term ((PLUS|MINUS) term)*

term    	: factor ((MUL|DIV) factor)*

factor		: (PLUS|MINUS) factor
			: power

power		: call (POW factor)*

call		: atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom 		: INT|FLOAT|STRING|IDENTIFIER
			: LPAREN expr RPAREN
			: list-expr
			: if-expr
			: for-expr
			: while-expr
			: func-def

list-expr 	: LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr		: KEYWORD:KALAU expr KEYWORD:MAKA 
			  (statement if-expr-b|if-expr-c?)
			| (NEWLINE statements KEYWORD:SELESAI|if-expr-b|if-expr-c)

if-expr-b	: KEYWORD:KALAUGITU expr KEYWORD:MAKA 
			  (statement if-expr-b|if-expr-c?)
			| (NEWLINE statements KEYWORD:SELESAI|if-expr-b|if-expr-c)	

if-expr-c	: KEYWORD:SELAINNYA 
			  statement
			| (NEWLINE statements KEYWORD:SELESAI)

for-expr	: KEYWORD:DARI IDENTIFIER EQ expr KEYWORD:KE expr
			  (KEYWORD:STEP expr)? KEYWORD:MAKA 
			  statement
			| (NEWLINE statements KEYWORD:SELESAI)

while-expr	: KEYWORD:SELAMA expr KEYWORD:MAKA 
			  expr
			| (NEWLINE statements KEYWORD:SELESAI)

func-def	: KEYWORD:FUNGSI IDENTIFIER?
			  LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
			  (ARROW expr)
			| (NEWLINE statements KEYWORD:SELESAI)